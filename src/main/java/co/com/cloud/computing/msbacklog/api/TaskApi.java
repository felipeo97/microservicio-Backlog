/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.cloud.computing.msbacklog.api;

import co.com.cloud.computing.msbacklog.model.InlineResponse200;
import co.com.cloud.computing.msbacklog.model.ProjectTask;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.ArrayList;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
        date = "2022-05-23T04:04:15.496Z[GMT]")
@Validated
public interface TaskApi {

    @Operation(summary = "Retorna HTTP 200 al cambiar el estado de la tarea.",
            description = "Borrado logico dela tarea,se cambia el status por delete.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Se cambia el estado de la tarea exitosamente."),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/task/{idtask}/{projectIdentifier}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> taskIdtaskProjectIdentifierPatch(@Parameter(in = ParameterIn.PATH,
            description = "Identificador de la tarea", required=true,
            schema=@Schema()) @PathVariable("idtask") String idtask,
                                                          @Parameter(in = ParameterIn.PATH,
                                                                  description = "Identificador del poryecto",
                                                                  required=true, schema=@Schema())
                                                          @PathVariable("projectIdentifier") String projectIdentifier);


    @Operation(summary = "Retorna HTTP 200 al consultar exitosamente el total de horas de un proyecto.",
            description = "Total de horas del proyecto.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Total de horas de un proyecto",
                content = @Content(mediaType = "application/json",
                        schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/task/project/hours/{projectIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> taskProjectHoursProjectIdentifierGet(@Parameter(in = ParameterIn.PATH,
            description = "Identificador del poryecto", required=true,
            schema=@Schema()) @PathVariable("projectIdentifier") String projectIdentifier);


    @Operation(summary = "Retorna HTTP 200 al consultar exitosamente el total de horas de un proyecto por status.",
            description = "Total de horas del proyecto seg√∫n el status.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Total de horas de un proyecto por status",
                content = @Content(mediaType = "application/json",
                        schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/task/project/hours/{projectIdentifier}/{status}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> taskProjectHoursProjectIdentifierStatusGet(
            @Parameter(in = ParameterIn.PATH, description = "Identificador del poryecto", required=true,
                    schema=@Schema()) @PathVariable("projectIdentifier") String projectIdentifier,
            @Parameter(in = ParameterIn.PATH, description = "Estado", required=true, schema=@Schema())
            @PathVariable("status") String status);


    @Operation(summary = "Retorna HTTP 200 al consultar exitosamente todas las tareas de un proyecto.",
            description = "Ver todas las tareas de un proyecto.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta las tareas de un Proyecto Exitasamente",
                content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectTask.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/task/project/{projectIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayList<ProjectTask>> taskProjectProjectIdentifierGet(
            @Parameter(in = ParameterIn.PATH, description = "Identificador del poryecto", required=true,
                    schema=@Schema()) @PathVariable("projectIdentifier") String projectIdentifier);

}

